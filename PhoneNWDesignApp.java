/*
 * Leader: Meral Abdulkareem(2105036) B8
 * Wajd Al-Qahtani(2105344) B8 
 * Lama Al-Shehri(2105655) B0B
 * Reema Bahamdain(2009525) CP1
 * 
 * Subject: CPCS-324
 * Project: Phase 1
 * Constructor:
 * Dr. أسماء الشنقيطي 
 * Dr. سيدرا قريشي
 * Resourses: 
 * https://poe.com/s/OBiwglKejoZKQu77SSGv
 * https://poe.com/s/KWh5IC5oxN3OONGQ8jYg
 * https://stackoverflow.com/questions/6065710/how-does-javas-priorityqueue-differ-from-a-min-heap
 * https://www.geeksforgeeks.org/applications-of-minimum-spanning-tree/
 * https://www.gatevidyalay.com/tag/kruskals-algorithm-example-with-solution/
 * 
 */

package PhoneNetworkApp;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import GraphFramework.*;
public class PhoneNWDesignApp {

	public static void main(String[] args) throws FileNotFoundException {
		//  ======================Main======================== //

		// create a scanner object
        Scanner input = new Scanner(System.in);

        // verticesNO counting number of vertices
        int verticesNO = 0; 
		// edgesNO counting number of edges
        int edgesNO = 0; 

        // ======================Header========================//
        System.out.println("\t\t-----------------------------------------------------------------------------------------------------\n"
        		+ "\t\t|Test to Compute the Minimum Spanning Tree and Compare Running Time|\n"
        		+ "\t\t|For Kruskal's Algorithm & Prim's Algorithm (Using an ArrayList for Kruskal's & Min-heap for Prim's)|\n"
        		+ "\t\t-----------------------------------------------------------------------------------------------------\n");

        System.out.println("\t\t**********  (1) Requirement 1 Using Read_from_Graph Function ********** \n"
        		+ "\t\t**********  (2) Requirement 2 Using Make_Graph Function      ********** \n");
        
        // ------- Read User Input for the Selected Requirement -------- //

        System.out.print("Select Requirement Option --> ");
        // Read the user option of the Requirement
        int userInput = input.nextInt(); 
   
    	// If the user did not enter within option, print warnning message and ask for new option
        while ( userInput != 1 && userInput != 2) {
       	  System.out.println("Wrong Selection. ");   
              System.out.print("Select Requirement Option -> ");
              userInput = input.nextInt(); 
          }
        
    	
        // ------------------------ Requirement 1 ------------------------ //
        // The first option
        if(userInput == 1) {
        	System.out.println("\n\n\t\t\t-Requirement 1 Using Read From Graph function-");
             // Read from File	 	
        	 File graphFile = new File("GivenGraphRequirement1.txt");  
             // Create An Object of Graph as CityMap2
             Graph cityMap = new Graph();
             // Access readGraphFromFile Method in Graph Class
             cityMap.readGraphFromFile(graphFile); 
             MSTAlgorithm MSTAlgorithm;
             
        	 // --------------------------------------------- KRUSKAL ------------------------------------------------ //
             System.out.println("\nThe phone network (minimum spanning tree) generated by Kruskal algorithm"
             		+ " is as follows:\n");      
             
             MSTAlgorithm = new KruskalAlg(cityMap);
             // Read Graph in Kruskal Algorithm
             MSTAlgorithm.findMST(cityMap); 
             // Print info of MST List
             MSTAlgorithm.displayResultingMST(); 
             // Cost of Kruskal
             MSTAlgorithm.displayMSTcost(); 

             // --------------------------------------------- PQPRIM ------------------------------------------------- //
                       System.out.println("\nThe phone network (minimum spanning tree) generated by min-heap based Prim algorithm"
             		+ " is as follows:\n");

             MSTAlgorithm = new MHPrimAlg(cityMap);
			 // Read Graph in Prim Algorithm
             MSTAlgorithm.findMST(cityMap); 
             // Print info of MST List
             MSTAlgorithm.displayResultingMST();
			 // Display the Cost of MHPrim 
             MSTAlgorithm.displayMSTcost(); 
             
        } 
        
        
        // --------------------- Requirement 2 ------------------ //
      // The second option
	  if (userInput == 2) {
	System.out.println("\n\t\t\t-Requirement 2 Using Make Graph function-\n");
	
	  System.out.println("Cases of Edges(m) and Vertcies(n):");
	  System.out.println("(1) n= 1000, m= 10000\n(2) n= 1000, m= 15000\n(3) n= 1000, m= 25000");
	  System.out.println("(4) n= 5000, m= 15000\n(5) n= 5000, m= 25000");
	  System.out.println("(6) n= 10000, m= 15000\n(7) n= 10000, m= 25000");
	
	  // ------- Read User Input for the Selected Case -------- //
	  // Asking the user for test option
	  System.out.print("Select your Test Option -> ");
	   // userInput is option case
	    userInput = input.nextInt();
	  
      // write all required cases
	  do {
	      switch (userInput) {
	          case 1: {
	              verticesNO = 1000;
	              edgesNO = 10000;
	          }
	              ;
	              break;
	
	          case 2: {
	              verticesNO = 1000;
	              edgesNO = 15000;
	          }
	              ;
	              break;
	          case 3: {
	              verticesNO = 1000;
	              edgesNO = 25000;
	          }
	              ;
	              break;
	          case 4: {
	              verticesNO = 5000;
	              edgesNO = 15000;
	          }
	              ;
	              break;
	          case 5: {
	              verticesNO = 5000;
	              edgesNO = 25000;
	          }
	              ;
	              break;
	          case 6: {
	              verticesNO = 10000;
	              edgesNO = 15000;
	          }
	              ;
	              break;
	          case 7: {
	              verticesNO = 10000;
	              edgesNO = 25000;
	          }
	              ;
	              break;
	
	          default:
	              System.out.println("Option not found.");
	              System.out.print("Select your Test Option -> ");
	   
	              break;
	      }
	  } while (1 < 1 || 7 > 7);
	  
	

	  // Create An Object of Graph as networkMap 
	  Graph cityMap = new Graph(verticesNO, edgesNO, false);
	  // Access readGraphFromFile Method in Graph Class
	  cityMap.makeGraph(verticesNO, edgesNO);
	  MSTAlgorithm MSTAlgorithm;
	  System.out.println("\n***\nP.S. All generated graphs will remain undirected.\n***\n");

	// --------------------------------------------- KRUSKAL ------------------------------------------------ //
	  System.out.println("\nThe network line map (minimum spanning tree) generated by Kruskal's algorithm"
       		+ " is as follows:");
	  // Chose Kruskal as the MST Object now
	  MSTAlgorithm = new KruskalAlg(cityMap);
	  // Start time of Kruskal   
      double KruskalstartTime = System.currentTimeMillis();   
      // Calculate the MST result
      MSTAlgorithm.findMST(cityMap); 
	  // End time of Kruskal  
      double KruskalfinishTime = System.currentTimeMillis();
	  // Final time  
      double kruskalFinalTime = KruskalfinishTime - KruskalstartTime;
	  // Get the MST-Cost of Kruskal 
      MSTAlgorithm.displayMSTcost(); 
      System.out.println("Running time for Kruskal's Algorithm: "+ kruskalFinalTime);

	  //--------------------------------------------- MHPRIM ------------------------------------------------- //
      System.out.println("\nThe network line map (minimum spanning tree) generated by Prim's algorithm is as follows:");     
      
	  // Chose MHPRIM as the MST Object now
      MSTAlgorithm = new MHPrimAlg(cityMap); 
	  //start time of MHPRIM
      double MHPrimstartTime = System.currentTimeMillis(); 
	  // Calculate the MST result
      MSTAlgorithm.findMST(cityMap); 
	  //start time of MHPRIM  
      double MHPrimfinishtTime = System.currentTimeMillis();
	  // Final time  
      double MHPrimlFinalTime = MHPrimfinishtTime - MHPrimstartTime; 
	  // Get the MST-Cost of Prim
      MSTAlgorithm.displayMSTcost(); 
      System.out.println("Running time for Prim's Algorithm: "+ MHPrimlFinalTime);
    
    }   
    }
}